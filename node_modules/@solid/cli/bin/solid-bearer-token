#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const SolidClient = require('../src/SolidClient');
const IdentityManager = require('../src/IdentityManager');

// Parse the command-line arguments
const args = process.argv.slice(2);
if (args.length !== 4)
  die('Usage: solid-bearer-token identity_provider username password url');
const [identityProvider, username, password, url] = args;



// Initialize the Solid client using the settings file
const settingsFile = path.join(process.env.HOME, '.solid-cli.json');
const identityManager = loadIdentityManager(settingsFile);
const client = new SolidClient({ identityManager });

// Obtain an access token for the given URL
const token = getToken(client, { identityProvider, username, password, url });

// Save the settings file when done
token.finally(() => saveIdentityManager(identityManager, settingsFile));

// Log the access token to the console
token.then(console.log, die);



// Instantiates the identity manager from the given settings file
function loadIdentityManager(settingsFile) {
  let settingsJson;
  try { settingsJson = fs.readFileSync(settingsFile, 'utf8'); }
  catch (error) { settingsJson = '{}'; }
  return IdentityManager.fromJSON(settingsJson);
}

// Saves the identity manager into a settings file
function saveIdentityManager(identityManager, settingsFile) {
  const settingsJSON = identityManager.toJSON();
  fs.writeFileSync(settingsFile, settingsJSON);
}

// Obtains a token
async function getToken(client, { identityProvider, username, password, url }) {
  const session = await client.login(identityProvider, { username, password });
  return client.createToken(url, session);
}

// Terminates the process with the given error
function die(error) {
  console.error(error);
  process.exit(1);
}
